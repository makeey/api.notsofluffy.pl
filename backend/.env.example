# NotSoFluffy Backend Environment Configuration
# Copy this file to .env and configure the values for your environment

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# Database Configuration
# External PostgreSQL database connection string
# Format: postgres://username:password@host:port/database?sslmode=require
DATABASE_URL=postgres://username:password@your-db-host:5432/notsofluffy?sslmode=require

# JWT Secret Key - MUST be changed in production
# Generate with: openssl rand -base64 32
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# =============================================================================
# CORS AND DOMAIN CONFIGURATION
# =============================================================================

# Allowed Origins for CORS (comma-separated)
# Development example:
# ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
# Production example:
ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# Your domain name (used for SSL and security headers)
DOMAIN=yourdomain.com

# =============================================================================
# SSL/HTTPS CONFIGURATION
# =============================================================================

# Enable HTTPS in the application (usually false when using Nginx proxy)
ENABLE_HTTPS=false

# HTTPS Port (when ENABLE_HTTPS=true)
HTTPS_PORT=443

# HTTP Port (when using HTTP or behind proxy)
HTTP_PORT=80

# Let's Encrypt email (when using direct SSL)
ACME_EMAIL=your-email@example.com

# Certificate cache directory (when using direct SSL)
CERT_CACHE_DIR=./certs

# =============================================================================
# DATABASE SSL CONFIGURATION
# =============================================================================

# Database SSL Mode
# Options: disable, require, verify-ca, verify-full
# - disable: No SSL (only for development)
# - require: SSL required but no certificate verification
# - verify-ca: SSL with CA certificate verification
# - verify-full: SSL with full certificate verification including hostname
DB_SSL_MODE=require

# Database SSL Certificates (for verify-ca or verify-full modes)
# Path to client certificate file
DB_SSL_CERT=

# Path to client private key file
DB_SSL_KEY=

# Path to CA certificate file
DB_SSL_ROOT_CERT=

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Development mode (enables debug logging, etc.)
# Set to false in production
DEVELOPMENT=false

# Server port (usually 8080)
PORT=8080

# Gin mode (debug, release, test)
# Set to release in production
GIN_MODE=release

# =============================================================================
# EXAMPLE CONFIGURATIONS
# =============================================================================

# --- DEVELOPMENT CONFIGURATION ---
# DATABASE_URL=postgres://postgres:postgres@localhost:5432/notsofluffy?sslmode=disable
# JWT_SECRET=dev-secret-key-not-for-production
# ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
# DOMAIN=localhost
# ENABLE_HTTPS=false
# DB_SSL_MODE=disable
# DEVELOPMENT=true
# GIN_MODE=debug

# --- PRODUCTION CONFIGURATION ---
# DATABASE_URL=postgres://produser:securepassword@prod-db-host:5432/notsofluffy?sslmode=require
# JWT_SECRET=your-super-secure-jwt-secret-generated-with-openssl
# ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
# DOMAIN=yourdomain.com
# ENABLE_HTTPS=false
# DB_SSL_MODE=require
# DEVELOPMENT=false
# GIN_MODE=release

# --- PRODUCTION WITH DATABASE SSL VERIFICATION ---
# DATABASE_URL=postgres://produser:securepassword@prod-db-host:5432/notsofluffy?sslmode=verify-full
# DB_SSL_MODE=verify-full
# DB_SSL_ROOT_CERT=/app/ssl/certs/ca-certificate.crt
# DB_SSL_CERT=/app/ssl/certs/client-certificate.crt
# DB_SSL_KEY=/app/ssl/certs/client-key.key

# =============================================================================
# ENVIRONMENT-SPECIFIC NOTES
# =============================================================================

# AWS RDS:
# - Use sslmode=require
# - Download RDS CA certificate if using verify-ca or verify-full
# - Example: DATABASE_URL=postgres://username:password@your-rds-endpoint.region.rds.amazonaws.com:5432/notsofluffy?sslmode=require

# DigitalOcean Managed Database:
# - Use sslmode=require
# - Download CA certificate from DigitalOcean control panel if needed
# - Example: DATABASE_URL=postgres://username:password@your-db-cluster.db.ondigitalocean.com:25060/notsofluffy?sslmode=require

# Google Cloud SQL:
# - Use sslmode=require for SSL connections
# - Download SSL certificates from Google Cloud Console if using client certificates
# - Example: DATABASE_URL=postgres://username:password@your-instance-ip:5432/notsofluffy?sslmode=require

# Azure Database for PostgreSQL:
# - Use sslmode=require
# - SSL is enforced by default
# - Example: DATABASE_URL=postgres://username@servername:password@servername.postgres.database.azure.com:5432/notsofluffy?sslmode=require

# =============================================================================
# SECURITY RECOMMENDATIONS
# =============================================================================

# 1. Never commit .env files to version control
# 2. Use strong, unique passwords for database connections
# 3. Generate JWT secrets with: openssl rand -base64 32
# 4. Always use SSL for production database connections
# 5. Regularly rotate JWT secrets and database passwords
# 6. Use environment-specific configuration files
# 7. Limit CORS origins to your actual frontend domains
# 8. Enable SSL certificate verification when possible